import psutil
import time
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.linear_model import LinearRegression
from datetime import datetime

data = []

# Coleta de dados
for _ in range(60):  # coleta por 1 min (1s intervalo)
    cpu = psutil.cpu_percent()
    mem = psutil.virtual_memory().percent
    timestamp = datetime.now().strftime("%H:%M:%S")
    data.append([timestamp, cpu, mem])
    time.sleep(1)

# Salvando dados
df = pd.DataFrame(data, columns=["Time", "CPU", "Memory"])
df.to_csv("monitoramento.csv", index=False)

# Gráficos
plt.plot(df["CPU"], label="CPU")
plt.plot(df["Memory"], label="Memória")
plt.legend()
plt.title("Uso de CPU e Memória")
plt.xlabel("Tempo (s)")
plt.ylabel("% Uso")
plt.savefig("grafico_monitoramento.png")
plt.close()

# -*- coding: utf-8 -*-
"""IAAM_250225_Projeto04.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1O9vc61rz1Qnt5Tj-Uko7xSXtJmDbt14i

# BASE DE DADOS:
"""

# Importar lib do pandas:
import pandas as pd

URL = "https://raw.githubusercontent.com/profviniciusheltai/AulaIA/refs/heads/main/Projeto04.csv"

dados = pd.read_csv(URL)
dados.head()

"""Editar informações:

* Trocar o nome do indice (PT_BR)
* Ajustar os valores da tabela
"""

# Dicionario de tradução:
a_renomear = {
  "mileage_per_year":"milhas_por_ano",
  "model_year":"ano_do_modelo",
  "price":"preco",
  "sold":"vendido"
 }

# Aplicação da tradução:
dados = dados.rename(columns = a_renomear)
dados.head()

# Dicionario de tradução das informações de "vendido":
a_trocar = {
    "no":0,
    "yes":1
}

# Aplicando tradução na coluna toda de "vendido":
dados.vendido = dados.vendido.map(a_trocar)
dados.head()

"""Editar as inforamções (criar) a informação do ano_do_modelo. Ao inves de manter o ano, colocar quanto tempo o veiculo tem (idade)."""

# Importar libs para processar datas:
from datetime import datetime

# Processamento da informação:
ano_atual = datetime.today().year
dados["idade_do_modelo"] = ano_atual - dados.ano_do_modelo
dados.head()

"""Considerando que 1 mile = 1.60934 Km. Podemos criar uma nova coluna "km_por_ano" com os dados convertidos:"""

dados["km_por_ano"] = dados.milhas_por_ano * 1.60934
dados.head()

"""Limpando a base com informações irrelavantes:"""

dados = dados.drop(columns=["Unnamed: 0",
                            "milhas_por_ano",
                            "ano_do_modelo"],
                   axis=1)
dados.head()

"""Montagem das Base 1:"""

# Importando a lib:
import numpy as np
from sklearn.model_selection import train_test_split

# Definindo o que é X e Y
x = dados[["preco", "idade_do_modelo", "km_por_ano"]]
y = dados["vendido"]

# Criação da Base 1:
SEED = 20
np.random.seed(SEED)
treino1_x, teste1_x, treino1_y, teste1_y = train_test_split(
    x, y, test_size=0.30, stratify=y)

# Demonstração do resultado:
print(f"Treino1: {len(treino1_x)} e Teste1: {len(teste1_x)}")

"""Montagem das Base 2 (Utilizando StandardScaler)"""

# Importando a lib:
from sklearn.preprocessing import StandardScaler
from sklearn.svm import SVC

# Criação da Base 2:
SEED = 20
np.random.seed(SEED)
treino2_x, teste2_x, treino2_y, teste2_y = train_test_split(
    x, y, test_size=0.30, stratify=y)

scaler2 = StandardScaler()
scaler2.fit(treino2_x)

treino2_x = scaler2.transform(treino2_x)
teste2_x = scaler2.transform(teste2_x)

# Demonstração do resultado:
print(f"Treino2: {len(treino2_x)} e Teste2: {len(teste2_x)}")

"""# TREINAMENTO / TESTE / ACURACIA:

MODELO LINEARSVC():
"""

# Importação das Libs e Modulos necessarios
from sklearn.svm import LinearSVC
from sklearn.metrics import accuracy_score

# Treinamento:
modelo1 = LinearSVC()
modelo1.fit(treino1_x, treino1_y)

# Teste:
previsoes1 = modelo1.predict(teste1_x)

# Acuracia:
acuracia1 = accuracy_score(teste1_y, previsoes1)*100
print(f"Acuracia1 = {acuracia1:.2f} - LinearSVC")

"""MODELO DUMMY STRATIFIED:"""

# Importação das Libs e Modulos necessarios
from sklearn.dummy import DummyClassifier

# Treinamento:
modelo2 = DummyClassifier()
modelo2.fit(treino1_x, treino1_y)

# Teste:
previsoes2 = modelo2.predict(teste1_x)

# Acuracia:
acuracia2 = accuracy_score(teste1_y, previsoes2)*100
print(f"Acuracia1 = {acuracia1:.2f} - LinearSVC")

print(f"Acuracia2 = {acuracia2:.2f} - DummyClassifier")

"""MODELO SKLEARN SVC:"""

# Treinamento:
modelo3 = SVC()
modelo3.fit(treino2_x, treino2_y)

# Teste:
previsoes3 = modelo3.predict(teste2_x)

# Acuracia:
acuracia3 = accuracy_score(teste2_y, previsoes3)*100

# Anteriores para Comparar:
print(f"Acuracia1 = {acuracia1:.2f} - LinearSVC")
print(f"Acuracia2 = {acuracia2:.2f} - DummyClassifier")

# Novo modelo (resultado):
print(f"Acuracia3 = {acuracia3:.2f} - SVC()")

"""# ANALISE GRAFICA DOS RESULTADOS:"""

# Importando seaborn e o modelo SNS
import seaborn as sns

# Plotando o grafico de dispersão:
sns.relplot(x="idade_do_modelo", y="preco", hue="vendido", col="vendido", data=dados)

# Plotando o grafico de dispersão:
sns.relplot(x="km_por_ano", y="preco", hue="preco", col="vendido", data=dados)

# Importando seaborn e o modelo SNS
import seaborn as sns

# Plotando o grafico de dispersão:
sns.relplot(x="idade_do_modelo", y="km_por_ano", hue="preco", col="vendido", data=dados)

# Plotando o grafico de dispersão:
sns.scatterplot(x="km_por_ano", y="idade_do_modelo", hue="vendido", data=dados)

# Plotando o grafico de dispersão:
sns.relplot(x="km_por_ano", y="preco", hue="vendido", data=dados)

"""# ARVORE DE DECISÃO"""

# Impotar a Lib para o uso de Arvore de Decisão:
from sklearn.tree import DecisionTreeClassifier

# Estaremos utilizando a Base 2 - Ja utilizada acima (copia do trecho abaixo):
'''
# Criação da Base 2:
SEED = 20
np.random.seed(SEED)
treino2_x, teste2_x, treino2_y, teste2_y = train_test_split(
    x, y, test_size=0.30, stratify=y)

scaler2 = StandardScaler()
scaler2.fit(treino2_x)

treino2_x = scaler2.transform(treino2_x)
teste2_x = scaler2.transform(teste2_x)

# Demonstração do resultado:
print(f"Treino2: {len(treino2_x)} e Teste2: {len(teste2_x)}")
'''

# Treinamento
modelo4 = DecisionTreeClassifier()
modelo4.fit(treino2_x, treino2_y)

# Testar
previsoes4 = modelo4.predict(teste2_x)

# Acuracia:
acuracia4 = accuracy_score(teste2_y, previsoes4)*100

# Anteriores para Comparar:
print(f"Acuracia1 = {acuracia1:.2f} - LinearSVC")
print(f"Acuracia2 = {acuracia2:.2f} - DummyClassifier")
print(f"Acuracia3 = {acuracia3:.2f} - SVC()")

# Novo modelo (resultado):
print(f"Acuracia4 = {acuracia4:.2f} - DecisionTreeClassifier")

